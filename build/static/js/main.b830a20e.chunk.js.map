{"version":3,"sources":["components/controls/ButtonsContainer.js","components/controls/Arrows.js","components/visualization/Tree.js","components/visualization/ChessBoard.js","components/mainView/MainView.js","components/header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonsContainer","props","Container","className","buttons","map","button","Button","onClick","active","variant","style","text","Arrows","RD3Component","rd3","Component","Tree","useState","treeDiv","setTreeDiv","treeData","generateMarker","d","marker","document","createElementNS","d3","attr","data","type","generateTextValue","value","useEffect","div","createElement","svg","append","screenWidth","window","innerWidth","documentElement","clientWidth","body","width","margin","height","root","nodes","size","tree","g","node","selectAll","descendants","slice","enter","x","y","parent","children","game","Chessjs","ChessBoard","boardPosition","setBoardPosition","next","setMoveTree","progressTreeGen","setProgressTreeGen","treeGenerator","Worker","onmessage","event","msg","console","log","chessBoardConfig","screenHeight","position","prevPosition","clear","Object","entries","forEach","entry","put","toLowerCase","color","postMessage","maxDepth","marginTop","ProgressBar","animated","display","now","MainView","fluid","Row","Col","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b830a20e.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport './Controls.scss';\n\nconst ButtonsContainer = (props) => {\n\treturn (\n\t\t<Container className=\"control-container\">\n\t\t\t{props.buttons.map((button) => {\n\t\t\t\treturn (<Button onClick={button.onClick} active={button.active} variant={button.variant || \"outline-dark\"} className=\"control-btn\" style={button.style}>{button.text}</Button>);\n\t\t\t})}\n\t\t</Container>\n\t)\n}\n\nexport default ButtonsContainer;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport './Controls.scss';\n\nconst Arrows = () => {\n\n\treturn (\n\t\t<Container className=\"control-container\">\n\t\t\t<Button variant=\"outline-secondary\" className=\"control-btn\">{\"<--\"}</Button>\n\t\t\t<Button variant=\"outline-secondary\" className=\"control-btn\">{\"-->\"}</Button>\n\t\t</Container>\n\t);\n}\n\nexport default Arrows;","import React, {useEffect, useState} from 'react';\nimport * as d3 from 'd3';\nimport rd3 from 'react-d3-library';\nimport './Tree.scss';\n\nconst RD3Component = rd3.Component;\n\nconst Tree = () => {\n\tconst [treeDiv, setTreeDiv] = useState(null);\n\tconst [treeData, setTreeData] = useState(\n\t\t{\n\t\t\t\"value\": null,\n\t\t\t\"type\": 'max',\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"value\": null,\n\t\t\t\t\t\"type\": 'min',\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": 9,\n\t\t\t\t\t\t\t\"type\": 'max'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": 7,\n\t\t\t\t\t\t\t\"type\": 'max'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"value\": null,\n\t\t\t\t\t\"type\": 'min',\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": 6,\n\t\t\t\t\t\t\t\"type\": 'max',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": null,\n\t\t\t\t\t\t\t\"type\": 'max',\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": 3,\n\t\t\t\t\t\t\t\t\t\"type\": 'min',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": 4,\n\t\t\t\t\t\t\t\t\t\"type\": 'min',\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": null,\n\t\t\t\t\t\t\t\"type\": 'max',\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": 7,\n\t\t\t\t\t\t\t\t\t\"type\": 'min',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": 9,\n\t\t\t\t\t\t\t\t\t\"type\": 'min',\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"value\": null,\n\t\t\t\t\t\"type\": 'min',\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": 8,\n\t\t\t\t\t\t\t\"type\": 'max',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": 3,\n\t\t\t\t\t\t\t\"type\": 'max',\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t);\n\n\tconst generateMarker = (d) => {\n\t\tlet marker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n\t\td3.select(marker).attr('r', 15).attr('style', `fill:${d.data.type === 'max' ? '#fff' : '#000'};stroke:#609AAF;stroke-width:10`);\n\n\t\treturn marker;\n\t}\n\n\tconst generateTextValue = (d) => {\n\t\tconst text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n\n\t\td3.select(text)\n\t\t\t.style(\"text-anchor\", \"middle\")\n\t\t\t.style(\"font-size\", \"1em\")\n\t\t\t.style(\"stroke\", d.data.type === 'min' ? \"#fff\" : \"#000\" )\n\t\t\t.style(\"dominant-baseline\", \"central\")\n\t\t\t.text(d.data.value)\n\n\t\treturn text;\n\t}\n\n\tuseEffect(() => {\n\t\tconst div = document.createElement('div');\n\t\tconst svg = d3.select(div).attr('class', 'tree-container').append('svg');\n\t\tconst screenWidth  = window.innerWidth || document.documentElement.clientWidth ||\n\t\t\tdocument.body.clientWidth;\n\t\tconst basicWidth = 700;\n\n\t\tconst width = screenWidth < basicWidth ? screenWidth : basicWidth;\n\t\tconst margin = {top: 40, right: 0, bottom: 50, left: 0};\n\t\tconst height = 400 - margin.top - margin.bottom;\n\t\tconst root = d3.hierarchy(treeData);\n\t\tconst tree = d3.tree()\n\t\t\t.size([width, height]);\n\n\t\tconst nodes = tree(root);\n\n\t\tsvg.attr(\"width\", width + margin.left + margin.right)\n\t\t\t.attr(\"height\", height + margin.top + margin.bottom);\n\n\t\tconst g = svg.append(\"g\")\n\t\t\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\tconst link = g.selectAll(\".link\")\n\t\t\t.data( nodes.descendants().slice(1))\n\t\t\t.enter().append(\"path\")\n\t\t\t.attr(\"class\", \"link\")\n\t\t\t.attr(\"d\", function(d) {\n\t\t\t\treturn \"M\" + d.x + \",\" + d.y\n\t\t\t\t\t+ \"C\" + d.x + \",\" + (d.y + d.parent.y) / 2\n\t\t\t\t\t+ \" \" + d.parent.x + \",\" +  (d.y + d.parent.y) / 2\n\t\t\t\t\t+ \" \" + d.parent.x + \",\" + d.parent.y;\n\t\t\t});\n\n\t\tconst node = g.selectAll(\".node\")\n\t\t\t.data(nodes.descendants())\n\t\t\t.enter().append(\"g\")\n\t\t\t.attr(\"class\", function(d) {\n\t\t\t\treturn \"node\" +\n\t\t\t\t\t(d.children ? \" node--internal\" : \" node--leaf\"); })\n\t\t\t.attr(\"transform\", function(d) {\n\t\t\t\treturn \"translate(\" + d.x + \",\" + d.y + \")\"; });\n\n\t\tnode.append(generateMarker);\n\t\tnode.append(generateTextValue);\n\n\t\tsetTreeDiv(div);\n\t}, []);\n\n\n\treturn (\n\t\t<RD3Component data={treeDiv}/>\n\t)\n}\n\nexport default Tree;","import React, {useState, useEffect} from 'react';\nimport Chessboard from 'chessboardjsx';\nimport Chessjs from 'chess.js';\nimport ButtonsContainer from \"../controls/ButtonsContainer\";\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\n// import TreeGeneratorWorker from './treeGenerator.worker';\n\nimport './ProgressBar.scss'\n\nexport const game = new Chessjs();\nlet algorithm = 'minimax';\n\nexport const setAlgorithm = (algo) => {\n\tconst algoList = ['minimax', 'alphaBeta'];\n\n\tif (algoList.indexOf(algo) !== -1) {\n\t\talgorithm = algo;\n\t} else {\n\t\tconsole.error(`Algorithm ${algo} is not supported`);\n\t}\n}\n\nexport const getAlgorithm = () => {\n\treturn algorithm;\n}\n\n\n\nconst ChessBoard = () => {\n\tconst [boardPosition, setBoardPosition] = useState({});\n\tconst [moveTree, setMoveTree] = useState({ next: []});\n\tconst [progressTreeGen, setProgressTreeGen] = useState(0);\n\n\tconst maxDepth = 4;\n\tconst treeGenerator = new Worker('./treeGenerator.worker.js');\n\n\tconst startTreeGenerator = () => {\n\t\ttreeGenerator.postMessage({\n\t\t\tmsg: 'generate',\n\t\t\tmaxDepth: maxDepth\n\t\t});\n\t}\n\n\tuseEffect(() => {\n\t\ttreeGenerator.onmessage = (event) => {\n\t\t\tif (event && event.data) {\n\t\t\t\tif (event.data.msg === 'progress') {\n\t\t\t\t\tsetProgressTreeGen(event.data.value);\n\t\t\t\t\tconsole.log(event.data.value);\n\t\t\t\t}\n\n\t\t\t\tif (event.data.msg === 'moveTree') {\n\t\t\t\t\tsetMoveTree(event.data.value);\n\t\t\t\t\tconsole.log(event.data.value);\n\t\t\t\t}\n\n\t\t\t\tif (event.data.msg === 'log') {\n\t\t\t\t\tconsole.log(event.data.value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// const generateMoveTree = () => {\n\t// \tconst fn = (depth, node) => {\n\t// \t\tlet turn, moves = [];\n\t//\n\t// \t\tdepth++;\n\t//\n\t// \t\tif (depth === maxDepth) {\n\t// \t\t\t// evaluate();\n\t// \t\t\treturn;\n\t// \t\t}\n\t//\n\t// \t\tturn = game.turn();\n\t// \t\tmoves = game.moves();\n\t// \t\tmoves.forEach((move, i) => {\n\t// \t\t\tsetProgressTreeGen((prev) => {\n\t// \t\t\t\treturn ((i + 1)/moves.length) * 100;\n\t// \t\t\t});\n\t// \t\t\tconst newNode = {\n\t// \t\t\t\tside: turn,\n\t// \t\t\t\tmove: move,\n\t// \t\t\t\tnext: []\n\t// \t\t\t};\n\t//\n\t// \t\t\tnode.next.push(newNode);\n\t// \t\t\tgame.move(move);\n\t// \t\t\tfn(depth, newNode);\n\t// \t\t\tgame.undo();\n\t// \t\t});\n\t//\n\t// \t\tdepth--;\n\t//\n\t// \t\treturn node;\n\t// \t}\n\t//\n\t// \tsetMoveTree((prev) => {\n\t// \t\tconst moveTree = fn(0, tmpMoveTree);\n\t// \t\tconsole.log(moveTree);\n\t// \t\treturn moveTree;\n\t// \t});\n\t// }\n\n\tconst chessBoardConfig = {\n\t\t\"calcWidth\": ({ screenWidth, screenHeight }) =>\n\t\t\t(screenWidth || screenHeight) < 550 ? 200 : 300,\n\t\t\"position\": boardPosition,\n\t\t\"sparePieces\": true,\n\t\t\"dropOffBoard\": \"trash\",\n\t\t\"boardStyle\": {\n\t\t\t\"border\": \"5px solid black\",\n\t\t\t\"box-sizing\": \"content-box\",\n\t\t},\n\t\t\"getPosition\": (position) => {\n\t\t\tsetBoardPosition((prevPosition) => {\n\t\t\t\tgame.clear();\n\n\t\t\t\tObject.entries(position).forEach((entry) => {\n\t\t\t\t\tgame.put({type: entry[1][1].toLowerCase(), color: entry[1][0]}, entry[0]);\n\t\t\t\t});\n\n\t\t\t\treturn position;\n\t\t\t});\n\t\t}\n\t}\n\n\tconst buttons = [\n\t\t{\n\t\t\ttext: 'Start',\n\t\t\tactive: false,\n\t\t\tonClick: startTreeGenerator,\n\t\t\tstyle: {\n\t\t\t\tmarginTop: '20px',\n\t\t\t\twidth: '50%'\n\t\t\t}\n\t\t}\n\t];\n\tconst progressBarStyles = {\n\t\tbackgroundColor: \"black\"\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Chessboard {...chessBoardConfig}/>\n\t\t\t<ProgressBar animated style={{display: progressTreeGen === 0 ? 'none' : null}} now={progressTreeGen}/>\n\t\t\t<ButtonsContainer buttons={buttons}/>\n\t\t</div>\n\t)\n}\n\nexport default ChessBoard;","import React, {useEffect} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './MainView.scss';\nimport ButtonsContainer from \"../controls/ButtonsContainer\";\nimport Arrows from \"../controls/Arrows\";\nimport Tree from \"../visualization/Tree\";\nimport ChessBoard from \"../visualization/ChessBoard\";\n\nconst MainView = () => {\n\n\tuseEffect(() => {\n\n\t}, []);\n\n\tconst chessBoardStyles = {\n\t\t\"position\": \"fixed\",\n\t\t\"top\": 20,\n\t\t\"right\": 20,\n\t};\n\n\tconst navButtons = [\n\t\t{\n\t\t\ttext: 'Minimax',\n\t\t\tactive: true\n\t\t},\n\t\t{\n\t\t\ttext: 'AlphaBeta',\n\t\t\tactive: false\n\t\t}\n\t]\n\n\treturn (\n\t\t<Container fluid className=\"viewer__container\">\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Container fluid className=\"viewer__title\">\n\t\t\t\t\t\t<h2>Alpha-beta pruning visualization</h2>\n\t\t\t\t\t</Container>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Container className=\"viewer\">\n\t\t\t\t\t\t<ButtonsContainer buttons={navButtons}/>\n\t\t\t\t\t\t<div style={chessBoardStyles}>\n\t\t\t\t\t\t\t<ChessBoard/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Tree/>\n\t\t\t\t\t\t<Arrows/>\n\t\t\t\t\t</Container>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n}\n\nexport default MainView;","import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<header className=\"App-header\">\n\n\t\t</header>\n\t);\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport MainView from './components/mainView/MainView';\nimport Header from './components/header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <MainView/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}