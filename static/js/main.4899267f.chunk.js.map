{"version":3,"sources":["components/controls/ButtonsContainer.js","components/visualization/Tree.js","components/visualization/ChessBoard.js","components/visualization/treeGenerator.worker.js","components/info/InfoContainer.js","i18n/ru.js","components/forms/DepthControl.js","components/info/ProgressBar.js","components/modal/Modal.js","components/mainView/ColorScheme.js","components/mainView/MainView.js","components/header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonsContainer","props","Container","className","buttons","map","button","Button","onClick","disabled","active","variant","style","text","Tree","svgRef","useRef","useEffect","screenWidth","window","innerWidth","document","documentElement","clientWidth","body","height","innerHeight","clientHeight","width","radius","tree","d3","handleZoom","e","t","transform","current","select","attr","x","y","k","size","Math","PI","treeRoot","hierarchy","treeData","nodes","descendants","links","svg","selectAll","remove","g","append","zoom","on","call","link","data","enter","angle","d","transition","duration","delay","i","exp","source","depth","exit","nodeEnter","side","move","angleDeg","rotation","updateTree","moveTree","ref","ChessGame","Chessjs","treeGenerator","Worker","ChessBoard","useState","boardPosition","setBoardPosition","clear","fen","workerOnMessage","event","msg","setProgressTreeGen","Number","value","toFixed","setMoveTree","onSearchEnd","console","log","onSearchStart","children","setShowTree","postMessage","maxDepth","gameState","addEventListener","removeEventListener","chessBoardConfig","screenHeight","border","boxSizing","position","prevPosition","Object","entries","forEach","entry","put","type","toLowerCase","color","display","flexDirection","alignItems","InfoContainer","i18n","ALPHA_BETA_ALGORITHM_VISUALIZATION","FIRST_SCREEN_DESCRIPTION","GENERATING_TREE_MSG","ALPHA_BETA","MINIMAX","START_BUTTON","SEARCH_DEPTH","INVALID_DEPTH","DepthControl","Form","onSubmit","preventDefault","justifyContent","flexWrap","FormLabel","margin","lineHeight","verticalAlign","FormControl","as","isValid","isDepthValid","onChange","onDepthChange","textAlign","ProgressBar","animated","now","progressTreeGen","Modal","centered","dialogClassName","show","onHide","Header","closeButton","Title","Body","padding","mainViewColor","MainView","algo","setAlgo","setDepth","showProgressBar","setShowProgressBar","showTree","showTreeModal","setShowTreeModal","modalMsg","setModalMsg","switchAlgo","newAlgo","isSearchConditionsFulfilled","validateDepth","isNaN","parseInt","algoTranslationsList","minimax","alphaBeta","fluid","Row","Col","name","bind","background","target","fn","setTimeout","marginTop","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4899267f.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport './Controls.scss';\n\nconst ButtonsContainer = (props) => {\n\treturn (\n\t\t<Container className=\"control-container\">\n\t\t\t{props.buttons.map((button) => {\n\t\t\t\treturn (<Button onClick={button.onClick} disabled={button.disabled} active={button.active} variant={button.variant || \"outline-dark\"} className=\"control-btn\" style={button.style}>{button.text}</Button>);\n\t\t\t})}\n\t\t</Container>\n\t)\n}\n\nexport default ButtonsContainer;","import React, {useEffect, useRef, useState} from 'react';\nimport * as d3 from 'd3';\nimport './Tree.scss';\n\nconst Tree = (props) => {\n\tconst svgRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tconst screenWidth = window.innerWidth || document.documentElement.clientWidth ||\n\t\t\tdocument.body.clientWidth;\n\t\tconst screenHeight = window.innerHeight || document.documentElement.clientHeight ||\n\t\t\tdocument.body.clientHeight;\n\t\tconst height = screenHeight;\n\t\tconst width = screenWidth;\n\t\tconst diameter = (width > height ? height : width) * 0.99;\n\t\tconst radius = diameter / 2;\n\t\tconst duration = 750;\n\t\tconst tree = d3.tree();\n\n\t\ttree.size([2 * Math.PI, radius]);\n\n\t\tfunction handleZoom(e) {\n\t\t\tconst t = e.transform;\n\t\t\tconst svg = d3.select(svgRef.current);\n\t\t\tconst g = svg.select(\"g\")\n\n\t\t\tg.attr(\"transform\", `translate(${t.x + width / 2},${t.y + height / 2}) scale(${t.k})`);\n\t\t}\n\n\t\tconst updateTree = (treeRoot) => {\n\t\t\tconst hierarchy = d3.hierarchy(treeRoot);\n\t\t\tconst treeData = tree(hierarchy);\n\t\t\tconst nodes = hierarchy.descendants();\n\t\t\tconst links = treeData.links();\n\n\t\t\tconst svg = d3.select(svgRef.current);\n\n\t\t\tsvg.selectAll(\"*\").remove();\n\n\t\t\tsvg.attr(\"width\", width)\n\t\t\t\t.attr(\"height\", height);\n\n\t\t\tconst g = svg.append(\"g\")\n\t\t\t\t.attr(\"stroke-opacity\", 0.4)\n\t\t\t\t.attr(\"stroke-width\", 1.5)\n\t\t\t\t.attr(\"transform\", \"translate(\"+(width/2)+\",\"+(height/2)+\")\")\n\t\t\t\t.style(\"transform-origin\", \"-50% -50% 0\");\n\n\t\t\tconst zoom = d3.zoom()\n\t\t\t\t.on('zoom', handleZoom)\n\n\t\t\tsvg.call(zoom);\n\n\t\t\tconst link = g.selectAll(\".link\")\n\t\t\t\t.data(links);\n\n\t\t\tconst linkEnter = link.enter().append(\"path\")\n\t\t\t\t.attr(\"class\", \"link\")\n\t\t\t\t.attr(\"d\", d3.linkRadial()\n\t\t\t\t\t.angle(d => d.x)\n\t\t\t\t\t.radius(d => d.y))\n\t\t\t\t.style(\"opacity\", 0)\n\t\t\t\t.transition()\n\t\t\t\t.duration(300)\n\t\t\t\t.delay(function(d,i) {\n\t\t\t\t\treturn 2 * i / (Math.exp(d.source.depth + 1));\n\t\t\t\t})\n\t\t\t\t.style(\"opacity\", 1);\n\n\t\t\tlink.transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.attr(\"d\", d3.linkRadial()\n\t\t\t\t\t.angle(d => d.x)\n\t\t\t\t\t.radius(d => d.y));\n\n\t\t\tlink.exit().transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.attr(\"d\", d3.linkRadial()\n\t\t\t\t\t.angle(d => d.x)\n\t\t\t\t\t.radius(d => d.y))\n\t\t\t\t.remove();\n\n\t\t\tconst node = g.selectAll(\"circle\")\n\t\t\t\t.data(nodes);\n\n\t\t\tconst nodeEnter = node.enter().append(\"g\");\n\n\t\t\tnodeEnter.append(\"circle\")\n\t\t\t\t.attr(\"r\", 5)\n\t\t\t\t.attr(\"stroke\", function (d) {\n\t\t\t\t\treturn d.data.side === \"w\" || d.data.side === \"b\" ? \"#000\" : \"#626E98\";\n\t\t\t\t})\n\t\t\t\t.attr(\"fill\", function (d) {\n\t\t\t\t\treturn d.data.side === \"w\" ? \"#fff\" : ( d.data.side === \"b\" ? \"#000\" : \"#626E98\");\n\t\t\t\t})\n\t\t\t\t.attr(\"transform\", function (d) { return \"translate(\" + d3.pointRadial(d.x, d.y) + \")\"; });\n\n\t\t\tnodeEnter.append(\"text\")\n\t\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t\t.text(function(d) { return d.data.move; })\n\t\t\t\t.style(\"fill-opacity\", 1e-6)\n\t\t\t\t.attr(\"text-anchor\", function(d) { return d.x * 180 / Math.PI < 180 ? \"start\" : \"end\"; })\n\t\t\t\t.attr(\"dominant-baseline\", \"middle\")\n\t\t\t\t.attr(\"transform\", function (d) {\n\t\t\t\t\tconst angleDeg = d.x * 180 / Math.PI;\n\t\t\t\t\tconst rotation = angleDeg < 180 ? -(90 - angleDeg) : -(270 - angleDeg);\n\n\t\t\t\t\treturn `translate(${d3.pointRadial(d.x, d.y + 10)})rotate(${rotation})`;\n\t\t\t\t})\n\t\t\t\t.transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.style(\"fill-opacity\", 1)\n\n\t\t\t// const nodeUpdate = node.transition()\n\t\t\t// \t.duration(duration)\n\t\t\t// \t.attr(\"transform\", function(d) { return \"translate(\" + d3.pointRadial(d.x, d.y) + \")\"; })\n\t\t\t//\n\t\t\t// nodeUpdate.select(\"text\")\n\t\t\t// \t.style(\"fill-opacity\", 1)\n\t\t\t// \t.attr(\"transform\", function(d) { return d.x < 180 ? \"translate(0)\" : \"rotate(180)translate(-\" + (d.data.move.length + 50)  + \")\"; });\n\t\t\t//\n\t\t\t// const nodeExit = node.exit().transition()\n\t\t\t// \t.duration(duration)\n\t\t\t// \t.remove();\n\t\t\t//\n\t\t\t// nodeExit.select(\"circle\")\n\t\t\t// \t.attr(\"r\", 1e-6);\n\t\t\t//\n\t\t\t// nodeExit.select(\"text\")\n\t\t\t// \t.style(\"fill-opacity\", 1e-6);\n\t\t\t//\n\t\t\t// nodes.forEach(function(d) {\n\t\t\t// \td.x0 = d.x;\n\t\t\t// \td.y0 = d.y;\n\t\t\t// });\n\t\t};\n\n\t\tupdateTree(props.moveTree);\n\t}, [props.moveTree]);\n\n\treturn (\n\t\t<div className=\"tree-container\">\n\t\t\t<svg ref={svgRef}/>\n\t\t</div>\n\t)\n}\n\nexport default Tree;","/* eslint import/no-webpack-loader-syntax: off */\nimport React, {useState, useEffect} from 'react';\nimport Chessboard from 'chessboardjsx';\nimport Chessjs from 'chess.js';\n\nimport Worker from './treeGenerator.worker';\n\nconst ChessGame = new Chessjs();\nconst treeGenerator = new Worker();\n\nconst ChessBoard = (props) => {\n\tconst [boardPosition, setBoardPosition] = useState('');\n\tconst depth = props.depth;\n\n\tuseEffect(() => {\n\t\tChessGame.clear();\n\t\tsetBoardPosition(ChessGame.fen());\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst startTreeGenerator = () => {\n\t\t\tprops.setMoveTree({ children: []});\n\t\t\tprops.setShowTree(false);\n\t\t\tprops.setProgressTreeGen(0);\n\n\t\t\ttreeGenerator.postMessage({\n\t\t\t\tmsg: 'generate',\n\t\t\t\tmaxDepth: Number(depth),\n\t\t\t\tgameState: boardPosition\n\t\t\t});\n\t\t};\n\n\t\tconst workerOnMessage = (event) => {\n\t\t\tif (event && event.data) {\n\t\t\t\tif (event.data.msg === 'progress') {\n\t\t\t\t\tprops.setProgressTreeGen(Number((event.data.value * 100).toFixed(0)));\n\t\t\t\t}\n\n\t\t\t\tif (event.data.msg === 'moveTree') {\n\t\t\t\t\tprops.setMoveTree(event.data.value);\n\t\t\t\t\tprops.setProgressTreeGen(100);\n\t\t\t\t\tprops.onSearchEnd();\n\t\t\t\t}\n\n\t\t\t\tif (event.data.msg === 'log') {\n\t\t\t\t\tconsole.log(event.data.value);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprops.onSearchStart(startTreeGenerator);\n\n\t\ttreeGenerator.addEventListener('message', workerOnMessage);\n\n\t\treturn () => {\n\t\t\ttreeGenerator.removeEventListener('message', workerOnMessage);\n\t\t};\n\n\t}, [props, depth, boardPosition]);\n\n\tconst chessBoardConfig = {\n\t\t\"calcWidth\": ({ screenWidth, screenHeight }) =>\n\t\t\t(screenWidth || screenHeight) < 550 ? 200 : 300,\n\t\t\"position\": boardPosition,\n\t\t\"sparePieces\": true,\n\t\t\"dropOffBoard\": \"trash\",\n\t\t\"boardStyle\": {\n\t\t\tborder: \"1px solid black\",\n\t\t\tboxSizing: \"content-box\"\n\t\t},\n\t\t\"getPosition\": (position) => {\n\t\t\tsetBoardPosition((prevPosition) => {\n\t\t\t\tChessGame.clear();\n\n\t\t\t\tObject.entries(position).forEach((entry) => {\n\t\t\t\t\tChessGame.put({type: entry[1][1].toLowerCase(), color: entry[1][0]}, entry[0]);\n\t\t\t\t});\n\n\t\t\t\treturn ChessGame.fen();\n\t\t\t});\n\t\t}\n\t}\n\n\tconst chessBoardStyles = {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"center\"\n\t}\n\n\treturn (\n\t\t<div style={chessBoardStyles}>\n\t\t\t<Chessboard {...chessBoardConfig}/>\n\t\t</div>\n\t);\n}\n\nexport default ChessBoard;","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/treeGenerator.worker.c88a1ed5.worker.js\");\n}\n","import React, {useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport './InfoContainer.scss';\n\nconst InfoContainer = (props) => {\n\treturn (\n\t\t<Container style={props.style} className=\"info-container\">\n\t\t\t<span>\n\t\t\t\t{props.text}\n\t\t\t</span>\n\t\t\t{props.children}\n\t\t</Container>\n\t);\n}\n\nexport default InfoContainer;","const i18n = {\n\tALPHA_BETA_ALGORITHM_VISUALIZATION: \"Визуализация алгоритма альфа-бета\",\n\tFIRST_SCREEN_DESCRIPTION: \"Выберите вариант алгоритма и глубину поиска, затем расставьте фигуры на доске, чтобы сгенирировать дерево ходов для этого состояния\",\n\tGENERATING_TREE_MSG: \"Построение дерева...\",\n\tALPHA_BETA: \"Альфа-бета\",\n\tMINIMAX: \"Минимакс\",\n\tSTART_BUTTON: \"Создать дерево ходов\",\n\tSEARCH_DEPTH: \"Глубина поиска:\",\n\tINVALID_DEPTH: \"Глубина поиска - целое число от 1 до 5\"\n}\n\nexport default i18n;","import React, {createRef, useState} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport i18n from \"../../i18n/ru\";\n\nconst DepthControl = (props) => {\n\tconst depthFormStyles = {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"row\",\n\t\tjustifyContent: \"center\",\n\t\tflexWrap: \"wrap\"\n\t};\n\n\tconst depthControlInputStyles = {\n\t\twidth: 100,\n\t\tmargin: \".5rem\"\n\t};\n\n\tconst depthControlLabelStyles = {\n\t\tmargin: \".5rem\",\n\t\tlineHeight: \"31px\",\n\t\tverticalAlign: \"middle\"\n\t}\n\n\tconst depthControlErrorStyles = {\n\t\tcolor: \"red\",\n\t\twidth: \"100%\",\n\t\ttextAlign: \"center\"\n\t}\n\n\treturn (\n\t\t<Form onSubmit={(e) => {e.preventDefault()}} style={depthFormStyles}>\n\t\t\t<FormLabel style={depthControlLabelStyles}>{i18n.SEARCH_DEPTH}</FormLabel>\n\t\t\t<FormControl as=\"input\" size=\"sm\" type=\"number\" value={props.depth} isValid={props.isDepthValid} onChange={props.onDepthChange} style={depthControlInputStyles}/>\n\t\t\t{ !props.isDepthValid && (\n\t\t\t\t<div style={depthControlErrorStyles}>{i18n.INVALID_DEPTH}</div>\n\t\t\t)}\n\t\t</Form>\n\t)\n}\n\nexport default DepthControl;","import React from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport ProgressBarBS from \"react-bootstrap/ProgressBar\";\n\nimport './ProgressBar.scss'\n\nconst ProgressBar = (props) => {\n\n\treturn (\n\t\t<Container className=\"progress-container\">\n\t\t\t<ProgressBarBS animated now={props.progressTreeGen}/>\n\t\t\t<h2>{props.progressTreeGen}%</h2>\n\t\t</Container>\n\t);\n}\n\nexport default ProgressBar;","import React from 'react';\nimport ModalBS from 'react-bootstrap/Modal';\nimport './Modal.scss';\n\nconst Modal = (props) => {\n\treturn (\n\t\t<ModalBS centered={false} dialogClassName={\"custom-modal\"} show={props.show} onHide={props.onHide}>\n\t\t\t<ModalBS.Header closeButton>\n\t\t\t\t<ModalBS.Title>{props.msg}</ModalBS.Title>\n\t\t\t</ModalBS.Header>\n\t\t\t<ModalBS.Body style={{padding: 0}}>{props.children}</ModalBS.Body>\n\t\t</ModalBS>\n\t)\n}\n\nexport default Modal;","export const mainViewColor = \"#626E98\";","import React, {useEffect, useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from \"react-bootstrap/Button\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './MainView.scss';\nimport ButtonsContainer from \"../controls/ButtonsContainer\";\nimport Arrows from \"../controls/Arrows\";\nimport Tree from \"../visualization/Tree\";\nimport ChessBoard from \"../visualization/ChessBoard\";\nimport InfoContainer from \"../info/InfoContainer\";\nimport i18n from \"../../i18n/ru\";\nimport DepthControl from \"../forms/DepthControl\";\nimport ProgressBar from \"../info/ProgressBar\";\nimport Modal from '../modal/Modal';\nimport {mainViewColor} from \"./ColorScheme\";\n\nconst MainView = () => {\n\tconst [algo, setAlgo] = useState('minimax');\n\tconst [depth, setDepth] = useState(3);\n\tconst [progressTreeGen, setProgressTreeGen] = useState(0);\n\tconst [moveTree, setMoveTree] = useState({ children: []});\n\tconst [showProgressBar, setShowProgressBar] = useState(false);\n\tconst [showTree, setShowTree] = useState(false);\n\tconst [showTreeModal, setShowTreeModal] = useState(false);\n\tconst [modalMsg, setModalMsg] = useState('');\n\n\tconst switchAlgo = (newAlgo) => {\n\t\tsetAlgo(newAlgo);\n\t};\n\n\tconst isSearchConditionsFulfilled = () => {\n\t\treturn validateDepth(depth) && algo;\n\t}\n\n\tconst validateDepth = (depth) => {\n\t\treturn !Number.isNaN(parseInt(depth)) && depth < 6 && depth >= 1;\n\t};\n\n\tconst onDepthChange = (e) => {\n\t\tsetDepth(e.target.value);\n\t};\n\n\t/**\n\t * This functions will be overwritten by child component's methods\n\t * Initial values\n\t */\n\tlet onSearchStart = function () {};\n\n\tuseEffect(() => {\n\n\t}, []);\n\n\tconst algoTranslationsList = {\n\t\tminimax: i18n.MINIMAX,\n\t\talphaBeta: i18n.ALPHA_BETA\n\t};\n\n\tconst getAlgoButtonsConfig = () => {\n\t\tconst algoList = ['minimax', 'alphaBeta'];\n\n\t\treturn algoList.map((name) => {\n\t\t\treturn {\n\t\t\t\ttext: algoTranslationsList[name],\n\t\t\t\tactive: algo === name,\n\t\t\t\tonClick: switchAlgo.bind(null, name),\n\t\t\t\tstyle: {\n\t\t\t\t\tbackground: algo === name ? mainViewColor : \"initial\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tconst onSearchEnd = () => {\n\t\tsetModalMsg(algoTranslationsList[algo]);\n\t\tsetTimeout(() => {\n\t\t\tsetShowProgressBar(false);\n\t\t\tsetShowTree(true);\n;\t\t}, 500);\n\t}\n\n\treturn (\n\t\t<Container fluid className=\"viewer__container\">\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Container fluid className=\"viewer__title\">\n\t\t\t\t\t\t<h2 style={{padding: \"1rem\"}}>{i18n.ALPHA_BETA_ALGORITHM_VISUALIZATION}</h2>\n\t\t\t\t\t</Container>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Container className=\"viewer\">\n\t\t\t\t\t\t<InfoContainer text={i18n.FIRST_SCREEN_DESCRIPTION}/>\n\t\t\t\t\t\t<ButtonsContainer buttons={getAlgoButtonsConfig()}/>\n\t\t\t\t\t\t<DepthControl\n\t\t\t\t\t\t\tisDepthValid={validateDepth(depth)}\n\t\t\t\t\t\t\tdepth={depth}\n\t\t\t\t\t\t\tonDepthChange={onDepthChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ChessBoard\n\t\t\t\t\t\t\talgo={algo}\n\t\t\t\t\t\t\tdepth={depth}\n\t\t\t\t\t\t\tsetMoveTree={setMoveTree}\n\t\t\t\t\t\t\tonSearchStart={(fn) => {onSearchStart = fn} }\n\t\t\t\t\t\t\tonSearchEnd={onSearchEnd}\n\t\t\t\t\t\t\tsetShowTree={setShowTree}\n\t\t\t\t\t\t\tsetProgressTreeGen={setProgressTreeGen}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Container className=\"control-container\">\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tonSearchStart();\n\t\t\t\t\t\t\t\t\tsetShowTreeModal(true);\n\t\t\t\t\t\t\t\t\tsetShowProgressBar(true);\n\t\t\t\t\t\t\t\t\tsetModalMsg(i18n.GENERATING_TREE_MSG);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tactive={isSearchConditionsFulfilled()}\n\t\t\t\t\t\t\t\tdisabled={!isSearchConditionsFulfilled()}\n\t\t\t\t\t\t\t\tvariant={\"outline-dark\"}\n\t\t\t\t\t\t\t\tclassName=\"control-btn\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackground: mainViewColor,\n\t\t\t\t\t\t\t\t\tmarginTop: \"1rem\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>{i18n.START_BUTTON}</Button>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\tshow={showTreeModal}\n\t\t\t\t\t\t\tonHide={() => {setShowTreeModal(false)}}\n\t\t\t\t\t\t\tmsg={modalMsg}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ showTree &&\n\t\t\t\t\t\t\t\t<Tree moveTree={moveTree}/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{/*{ !showProgressBar &&*/}\n\t\t\t\t\t\t\t{/*\t<Arrows/>*/}\n\t\t\t\t\t\t\t{/*}*/}\n\t\t\t\t\t\t\t{ showProgressBar &&\n\t\t\t\t\t\t\t\t<ProgressBar progressTreeGen={progressTreeGen}/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Modal>\n\t\t\t\t\t</Container>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n}\n\nexport default MainView;","import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<header className=\"App-header\">\n\n\t\t</header>\n\t);\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport MainView from './components/mainView/MainView';\nimport Header from './components/header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <MainView/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}